CCS PCM C Compiler, Version 5.049, 5967               14-May-24 14:01

               Filename:   E:\san tech\Bhavankumar D Output\PIC\RTOS Example\RTOS.lst

               ROM used:   1619 words (20%)
                           Largest free fragment is 2048
               RAM used:   40 (11%) at main() level
                           105 (29%) worst case
               Stack used: 8 locations (3 in main + 5 for interrupts)
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   537
0003:  NOP
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  BCF    0A.0
000D:  BCF    0A.1
000E:  BCF    0A.2
000F:  ADDWF  02,F
0010:  RETLW  2B
0011:  RETLW  00
0012:  RETLW  32
0013:  RETLW  00
0014:  RETLW  39
0015:  RETLW  00
*
00CF:  MOVF   0B,W
00D0:  MOVWF  6A
00D1:  BCF    0B.7
00D2:  BSF    03.5
00D3:  BSF    03.6
00D4:  BSF    0C.7
00D5:  BSF    0C.0
00D6:  NOP
00D7:  NOP
00D8:  BCF    03.5
00D9:  BCF    03.6
00DA:  BTFSC  6A.7
00DB:  BSF    0B.7
00DC:  BTFSC  03.0
00DD:  GOTO   106
00DE:  BSF    03.6
00DF:  MOVF   0C,W
00E0:  ANDLW  7F
00E1:  BCF    03.6
00E2:  MOVWF  6A
00E3:  BSF    03.6
00E4:  MOVF   0D,W
00E5:  BCF    03.6
00E6:  MOVWF  6B
00E7:  BSF    03.6
00E8:  MOVF   0F,W
00E9:  BCF    03.6
00EA:  MOVWF  6C
00EB:  MOVF   6A,W
00EC:  MOVWF  76
00ED:  CALL   093
00EE:  MOVF   6B,W
00EF:  BSF    03.6
00F0:  MOVWF  0D
00F1:  BCF    03.6
00F2:  MOVF   6C,W
00F3:  BSF    03.6
00F4:  MOVWF  0F
00F5:  BCF    03.6
00F6:  MOVF   0B,W
00F7:  MOVWF  6D
00F8:  BCF    0B.7
00F9:  BSF    03.5
00FA:  BSF    03.6
00FB:  BSF    0C.7
00FC:  BSF    0C.0
00FD:  NOP
00FE:  NOP
00FF:  BCF    03.5
0100:  BCF    03.6
0101:  BTFSC  6D.7
0102:  BSF    0B.7
0103:  DECFSZ 69,F
0104:  GOTO   106
0105:  GOTO   125
0106:  BSF    03.6
0107:  RLF    0C,W
0108:  RLF    0E,W
0109:  ANDLW  7F
010A:  BCF    03.6
010B:  MOVWF  6A
010C:  BSF    03.6
010D:  MOVF   0D,W
010E:  BCF    03.6
010F:  MOVWF  6B
0110:  BSF    03.6
0111:  MOVF   0F,W
0112:  BCF    03.6
0113:  MOVWF  6C
0114:  MOVF   6A,W
0115:  MOVWF  76
0116:  CALL   093
0117:  MOVF   6B,W
0118:  BSF    03.6
0119:  MOVWF  0D
011A:  BCF    03.6
011B:  MOVF   6C,W
011C:  BSF    03.6
011D:  MOVWF  0F
011E:  INCF   0D,F
011F:  BTFSC  03.2
0120:  INCF   0F,F
0121:  BCF    03.0
0122:  BCF    03.6
0123:  DECFSZ 69,F
0124:  GOTO   0CF
0125:  RETURN
0126:  BTFSC  03.1
0127:  GOTO   12B
0128:  MOVLW  A4
0129:  MOVWF  04
012A:  BCF    03.7
012B:  CLRF   77
012C:  CLRF   78
012D:  CLRF   79
012E:  CLRF   7A
012F:  BSF    03.5
0130:  CLRF   24
0131:  CLRF   25
0132:  CLRF   26
0133:  CLRF   27
0134:  MOVF   23,W
0135:  IORWF  22,W
0136:  IORWF  21,W
0137:  IORWF  20,W
0138:  BTFSC  03.2
0139:  GOTO   16A
013A:  MOVLW  20
013B:  MOVWF  28
013C:  BCF    03.0
013D:  RLF    7B,F
013E:  RLF    7C,F
013F:  RLF    7D,F
0140:  RLF    7E,F
0141:  RLF    24,F
0142:  RLF    25,F
0143:  RLF    26,F
0144:  RLF    27,F
0145:  MOVF   23,W
0146:  SUBWF  27,W
0147:  BTFSS  03.2
0148:  GOTO   153
0149:  MOVF   22,W
014A:  SUBWF  26,W
014B:  BTFSS  03.2
014C:  GOTO   153
014D:  MOVF   21,W
014E:  SUBWF  25,W
014F:  BTFSS  03.2
0150:  GOTO   153
0151:  MOVF   20,W
0152:  SUBWF  24,W
0153:  BTFSS  03.0
0154:  GOTO   164
0155:  MOVF   20,W
0156:  SUBWF  24,F
0157:  MOVF   21,W
0158:  BTFSS  03.0
0159:  INCFSZ 21,W
015A:  SUBWF  25,F
015B:  MOVF   22,W
015C:  BTFSS  03.0
015D:  INCFSZ 22,W
015E:  SUBWF  26,F
015F:  MOVF   23,W
0160:  BTFSS  03.0
0161:  INCFSZ 23,W
0162:  SUBWF  27,F
0163:  BSF    03.0
0164:  RLF    77,F
0165:  RLF    78,F
0166:  RLF    79,F
0167:  RLF    7A,F
0168:  DECFSZ 28,F
0169:  GOTO   13C
016A:  MOVF   24,W
016B:  MOVWF  00
016C:  INCF   04,F
016D:  MOVF   25,W
016E:  MOVWF  00
016F:  INCF   04,F
0170:  MOVF   26,W
0171:  MOVWF  00
0172:  INCF   04,F
0173:  MOVF   27,W
0174:  MOVWF  00
0175:  BCF    03.5
0176:  RETURN
0177:  MOVF   04,W
0178:  MOVWF  6E
0179:  MOVF   6D,W
017A:  MOVWF  70
017B:  BTFSC  03.2
017C:  GOTO   20B
017D:  MOVF   6C,W
017E:  MOVWF  7E
017F:  MOVF   6B,W
0180:  MOVWF  7D
0181:  MOVF   6A,W
0182:  MOVWF  7C
0183:  MOVF   69,W
0184:  MOVWF  7B
0185:  BSF    03.5
0186:  CLRF   23
0187:  CLRF   22
0188:  MOVLW  20
0189:  MOVWF  21
018A:  MOVLW  82
018B:  MOVWF  20
018C:  MOVF   7B,W
018D:  BTFSC  03.2
018E:  GOTO   1FC
018F:  MOVWF  24
0190:  MOVF   20,W
0191:  BTFSC  03.2
0192:  GOTO   1FC
0193:  ADDWF  24,F
0194:  BTFSC  03.0
0195:  GOTO   19D
0196:  MOVLW  7F
0197:  SUBWF  24,F
0198:  BTFSS  03.0
0199:  GOTO   1FC
019A:  BTFSC  03.2
019B:  GOTO   1FC
019C:  GOTO   1A1
019D:  MOVLW  81
019E:  ADDWF  24,F
019F:  BTFSC  03.0
01A0:  GOTO   1FC
01A1:  MOVF   24,W
01A2:  MOVWF  77
01A3:  CLRF   78
01A4:  CLRF   79
01A5:  CLRF   7A
01A6:  MOVF   7C,W
01A7:  MOVWF  28
01A8:  BSF    28.7
01A9:  MOVF   7D,W
01AA:  MOVWF  27
01AB:  MOVF   7E,W
01AC:  MOVWF  26
01AD:  MOVLW  18
01AE:  MOVWF  24
01AF:  CLRF   25
01B0:  BTFSS  26.0
01B1:  GOTO   1CA
01B2:  MOVF   23,W
01B3:  ADDWF  7A,F
01B4:  BTFSS  03.0
01B5:  GOTO   1BC
01B6:  INCF   79,F
01B7:  BTFSS  03.2
01B8:  GOTO   1BC
01B9:  INCF   78,F
01BA:  BTFSC  03.2
01BB:  BSF    25.7
01BC:  MOVF   22,W
01BD:  ADDWF  79,F
01BE:  BTFSS  03.0
01BF:  GOTO   1C3
01C0:  INCF   78,F
01C1:  BTFSC  03.2
01C2:  BSF    25.7
01C3:  MOVF   21,W
01C4:  MOVWF  7D
01C5:  BSF    7D.7
01C6:  MOVF   7D,W
01C7:  ADDWF  78,F
01C8:  BTFSC  03.0
01C9:  BSF    25.7
01CA:  RLF    25,F
01CB:  RRF    78,F
01CC:  RRF    79,F
01CD:  RRF    7A,F
01CE:  RRF    28,F
01CF:  RRF    27,F
01D0:  RRF    26,F
01D1:  BCF    03.0
01D2:  DECFSZ 24,F
01D3:  GOTO   1AF
01D4:  MOVLW  01
01D5:  ADDWF  77,F
01D6:  BTFSC  03.0
01D7:  GOTO   1FC
01D8:  BTFSC  78.7
01D9:  GOTO   1E1
01DA:  RLF    28,F
01DB:  RLF    7A,F
01DC:  RLF    79,F
01DD:  RLF    78,F
01DE:  DECF   77,F
01DF:  BTFSC  03.2
01E0:  GOTO   1FC
01E1:  BTFSS  28.7
01E2:  GOTO   1F2
01E3:  INCF   7A,F
01E4:  BTFSS  03.2
01E5:  GOTO   1F2
01E6:  INCF   79,F
01E7:  BTFSS  03.2
01E8:  GOTO   1F2
01E9:  INCF   78,F
01EA:  BTFSS  03.2
01EB:  GOTO   1F2
01EC:  RRF    78,F
01ED:  RRF    79,F
01EE:  RRF    7A,F
01EF:  INCF   77,F
01F0:  BTFSC  03.2
01F1:  GOTO   1FC
01F2:  MOVF   7C,W
01F3:  MOVWF  25
01F4:  MOVF   21,W
01F5:  XORWF  25,F
01F6:  BTFSS  25.7
01F7:  GOTO   1FA
01F8:  BSF    78.7
01F9:  GOTO   200
01FA:  BCF    78.7
01FB:  GOTO   200
01FC:  CLRF   77
01FD:  CLRF   78
01FE:  CLRF   79
01FF:  CLRF   7A
0200:  MOVF   7A,W
0201:  BCF    03.5
0202:  MOVWF  6C
0203:  MOVF   79,W
0204:  MOVWF  6B
0205:  MOVF   78,W
0206:  MOVWF  6A
0207:  MOVF   77,W
0208:  MOVWF  69
0209:  DECFSZ 70,F
020A:  GOTO   17D
020B:  MOVF   6C,W
020C:  MOVWF  7E
020D:  MOVF   6B,W
020E:  MOVWF  7D
020F:  MOVF   6A,W
0210:  MOVWF  7C
0211:  MOVF   69,W
0212:  MOVWF  7B
0213:  MOVF   7B,W
0214:  SUBLW  B6
0215:  MOVWF  7B
0216:  CLRF   7A
0217:  MOVF   7C,W
0218:  MOVWF  76
0219:  BSF    7C.7
021A:  BCF    03.0
021B:  RRF    7C,F
021C:  RRF    7D,F
021D:  RRF    7E,F
021E:  RRF    7A,F
021F:  RRF    79,F
0220:  RRF    78,F
0221:  RRF    77,F
0222:  DECFSZ 7B,F
0223:  GOTO   21A
0224:  BTFSS  76.7
0225:  GOTO   231
0226:  COMF   77,F
0227:  COMF   78,F
0228:  COMF   79,F
0229:  COMF   7A,F
022A:  INCF   77,F
022B:  BTFSC  03.2
022C:  INCF   78,F
022D:  BTFSC  03.2
022E:  INCF   79,F
022F:  BTFSC  03.2
0230:  INCF   7A,F
0231:  MOVF   7A,W
0232:  MOVWF  6C
0233:  MOVF   79,W
0234:  MOVWF  6B
0235:  MOVF   78,W
0236:  MOVWF  6A
0237:  MOVF   77,W
0238:  MOVWF  69
0239:  BTFSS  6C.7
023A:  GOTO   248
023B:  DECF   6E,F
023C:  BSF    6E.5
023D:  COMF   69,F
023E:  COMF   6A,F
023F:  COMF   6B,F
0240:  COMF   6C,F
0241:  INCF   69,F
0242:  BTFSC  03.2
0243:  INCF   6A,F
0244:  BTFSC  03.2
0245:  INCF   6B,F
0246:  BTFSC  03.2
0247:  INCF   6C,F
0248:  MOVLW  3B
0249:  MOVWF  75
024A:  MOVLW  9A
024B:  MOVWF  74
024C:  MOVLW  CA
024D:  MOVWF  73
024E:  CLRF   72
024F:  MOVLW  0A
0250:  MOVWF  70
0251:  MOVF   6D,W
0252:  BTFSC  03.2
0253:  INCF   6E,F
0254:  BSF    03.1
0255:  MOVLW  69
0256:  MOVWF  04
0257:  BCF    03.7
0258:  MOVF   6C,W
0259:  MOVWF  7E
025A:  MOVF   6B,W
025B:  MOVWF  7D
025C:  MOVF   6A,W
025D:  MOVWF  7C
025E:  MOVF   69,W
025F:  MOVWF  7B
0260:  MOVF   75,W
0261:  BSF    03.5
0262:  MOVWF  23
0263:  MOVF   74,W
0264:  MOVWF  22
0265:  MOVF   73,W
0266:  MOVWF  21
0267:  MOVF   72,W
0268:  MOVWF  20
0269:  BCF    03.5
026A:  CALL   126
026B:  MOVF   78,W
026C:  MOVF   77,F
026D:  BTFSS  03.2
026E:  GOTO   282
026F:  INCF   6D,W
0270:  SUBWF  70,W
0271:  BTFSC  03.2
0272:  GOTO   282
0273:  MOVF   6E,W
0274:  BTFSC  03.2
0275:  GOTO   284
0276:  ANDLW  0F
0277:  SUBWF  70,W
0278:  BTFSC  03.2
0279:  GOTO   27C
027A:  BTFSC  03.0
027B:  GOTO   2B4
027C:  BTFSC  6E.7
027D:  GOTO   2B4
027E:  BTFSC  6E.6
027F:  GOTO   284
0280:  MOVLW  20
0281:  GOTO   2B0
0282:  MOVLW  20
0283:  ANDWF  6E,F
0284:  BTFSS  6E.5
0285:  GOTO   292
0286:  BCF    6E.5
0287:  MOVF   6D,W
0288:  BTFSS  03.2
0289:  DECF   6E,F
028A:  MOVF   77,W
028B:  MOVWF  6E
028C:  MOVLW  2D
028D:  MOVWF  76
028E:  CALL   093
028F:  MOVF   6E,W
0290:  MOVWF  77
0291:  CLRF   6E
0292:  MOVF   6D,W
0293:  SUBWF  70,W
0294:  BTFSS  03.2
0295:  GOTO   2A0
0296:  MOVF   77,W
0297:  MOVWF  6E
0298:  MOVLW  2E
0299:  MOVWF  76
029A:  CALL   093
029B:  MOVF   6E,W
029C:  MOVWF  77
029D:  MOVLW  20
029E:  ANDWF  6E,F
029F:  MOVLW  00
02A0:  MOVLW  30
02A1:  BTFSS  6E.5
02A2:  GOTO   2B0
02A3:  BCF    6E.5
02A4:  MOVF   6D,W
02A5:  BTFSS  03.2
02A6:  DECF   6E,F
02A7:  MOVF   77,W
02A8:  MOVWF  6E
02A9:  MOVLW  2D
02AA:  MOVWF  76
02AB:  CALL   093
02AC:  MOVF   6E,W
02AD:  MOVWF  77
02AE:  CLRF   6E
02AF:  MOVLW  30
02B0:  ADDWF  77,F
02B1:  MOVF   77,W
02B2:  MOVWF  76
02B3:  CALL   093
02B4:  BCF    03.1
02B5:  MOVF   75,W
02B6:  MOVWF  7E
02B7:  MOVF   74,W
02B8:  MOVWF  7D
02B9:  MOVF   73,W
02BA:  MOVWF  7C
02BB:  MOVF   72,W
02BC:  MOVWF  7B
02BD:  BSF    03.5
02BE:  CLRF   23
02BF:  CLRF   22
02C0:  CLRF   21
02C1:  MOVLW  0A
02C2:  MOVWF  20
02C3:  BCF    03.5
02C4:  CALL   126
02C5:  MOVF   7A,W
02C6:  MOVWF  75
02C7:  MOVF   79,W
02C8:  MOVWF  74
02C9:  MOVF   78,W
02CA:  MOVWF  73
02CB:  MOVF   77,W
02CC:  MOVWF  72
02CD:  DECFSZ 70,F
02CE:  GOTO   254
02CF:  RETURN
*
02DF:  MOVLW  8E
02E0:  MOVWF  77
02E1:  MOVF   4F,W
02E2:  MOVWF  78
02E3:  MOVF   4E,W
02E4:  MOVWF  79
02E5:  CLRF   7A
02E6:  MOVF   78,F
02E7:  BTFSS  03.2
02E8:  GOTO   2F3
02E9:  MOVF   79,W
02EA:  MOVWF  78
02EB:  CLRF   79
02EC:  MOVLW  08
02ED:  SUBWF  77,F
02EE:  MOVF   78,F
02EF:  BTFSS  03.2
02F0:  GOTO   2F3
02F1:  CLRF   77
02F2:  GOTO   2FB
02F3:  BCF    03.0
02F4:  BTFSC  78.7
02F5:  GOTO   2FA
02F6:  RLF    79,F
02F7:  RLF    78,F
02F8:  DECF   77,F
02F9:  GOTO   2F3
02FA:  BCF    78.7
*
032A:  DATA 0C,3B
032B:  DATA 61,36
032C:  DATA F5,32
032D:  DATA 3D,10
032E:  DATA 25,33
032F:  DATA 00,00
*
0356:  MOVLW  80
0357:  BTFSC  03.1
0358:  XORWF  6E,F
0359:  BSF    03.5
035A:  CLRF   22
035B:  CLRF   23
035C:  BCF    03.5
035D:  MOVF   6A,W
035E:  BSF    03.5
035F:  MOVWF  21
0360:  BCF    03.5
0361:  MOVF   6E,W
0362:  BSF    03.5
0363:  XORWF  21,F
0364:  BCF    03.5
0365:  MOVF   69,W
0366:  BTFSC  03.2
0367:  GOTO   46C
0368:  BSF    03.5
0369:  MOVWF  20
036A:  MOVWF  77
036B:  BCF    03.5
036C:  MOVF   6D,W
036D:  BTFSC  03.2
036E:  GOTO   479
036F:  BSF    03.5
0370:  SUBWF  20,F
0371:  BTFSC  03.2
0372:  GOTO   406
0373:  BTFSS  03.0
0374:  GOTO   3B8
0375:  BCF    03.5
0376:  MOVF   6E,W
0377:  BSF    03.5
0378:  MOVWF  26
0379:  BSF    26.7
037A:  BCF    03.5
037B:  MOVF   6F,W
037C:  BSF    03.5
037D:  MOVWF  25
037E:  MOVF   70,W
037F:  MOVWF  24
0380:  CLRF   23
0381:  BCF    03.0
0382:  RRF    26,F
0383:  RRF    25,F
0384:  RRF    24,F
0385:  RRF    23,F
0386:  DECFSZ 20,F
0387:  GOTO   380
0388:  BTFSS  21.7
0389:  GOTO   38D
038A:  BSF    22.0
038B:  GOTO   492
038C:  BCF    22.0
038D:  BCF    20.0
038E:  BSF    22.4
038F:  MOVLW  6C
0390:  MOVWF  04
0391:  BCF    03.7
0392:  GOTO   4A7
0393:  BCF    22.4
0394:  BTFSC  21.7
0395:  GOTO   3A0
0396:  BTFSS  20.0
0397:  GOTO   3AB
0398:  RRF    26,F
0399:  RRF    25,F
039A:  RRF    24,F
039B:  RRF    23,F
039C:  INCF   77,F
039D:  BTFSC  03.2
039E:  GOTO   48D
039F:  GOTO   3AB
03A0:  BTFSC  26.7
03A1:  GOTO   3AE
03A2:  BCF    03.0
03A3:  RLF    23,F
03A4:  RLF    24,F
03A5:  RLF    25,F
03A6:  RLF    26,F
03A7:  DECF   77,F
03A8:  BTFSC  03.2
03A9:  GOTO   48D
03AA:  GOTO   3A0
03AB:  BSF    22.6
03AC:  GOTO   42C
03AD:  BCF    22.6
03AE:  BCF    03.5
03AF:  MOVF   6A,W
03B0:  BSF    03.5
03B1:  MOVWF  21
03B2:  BTFSS  21.7
03B3:  GOTO   3B6
03B4:  BSF    26.7
03B5:  GOTO   486
03B6:  BCF    26.7
03B7:  GOTO   486
03B8:  BCF    03.5
03B9:  MOVF   6D,W
03BA:  BSF    03.5
03BB:  MOVWF  20
03BC:  MOVWF  77
03BD:  BCF    03.5
03BE:  MOVF   69,W
03BF:  BSF    03.5
03C0:  SUBWF  20,F
03C1:  BCF    03.5
03C2:  MOVF   6A,W
03C3:  BSF    03.5
03C4:  MOVWF  26
03C5:  BSF    26.7
03C6:  BCF    03.5
03C7:  MOVF   6B,W
03C8:  BSF    03.5
03C9:  MOVWF  25
03CA:  BCF    03.5
03CB:  MOVF   6C,W
03CC:  BSF    03.5
03CD:  MOVWF  24
03CE:  CLRF   23
03CF:  BCF    03.0
03D0:  RRF    26,F
03D1:  RRF    25,F
03D2:  RRF    24,F
03D3:  RRF    23,F
03D4:  DECFSZ 20,F
03D5:  GOTO   3CE
03D6:  BTFSS  21.7
03D7:  GOTO   3DB
03D8:  BSF    22.1
03D9:  GOTO   492
03DA:  BCF    22.1
03DB:  BCF    20.0
03DC:  BSF    22.5
03DD:  MOVLW  70
03DE:  MOVWF  04
03DF:  BCF    03.7
03E0:  GOTO   4A7
03E1:  BCF    22.5
03E2:  BTFSC  21.7
03E3:  GOTO   3EE
03E4:  BTFSS  20.0
03E5:  GOTO   3F9
03E6:  RRF    26,F
03E7:  RRF    25,F
03E8:  RRF    24,F
03E9:  RRF    23,F
03EA:  INCF   77,F
03EB:  BTFSC  03.2
03EC:  GOTO   48D
03ED:  GOTO   3F9
03EE:  BTFSC  26.7
03EF:  GOTO   3FC
03F0:  BCF    03.0
03F1:  RLF    23,F
03F2:  RLF    24,F
03F3:  RLF    25,F
03F4:  RLF    26,F
03F5:  DECF   77,F
03F6:  BTFSC  03.2
03F7:  GOTO   48D
03F8:  GOTO   3EE
03F9:  BSF    22.7
03FA:  GOTO   42C
03FB:  BCF    22.7
03FC:  BCF    03.5
03FD:  MOVF   6E,W
03FE:  BSF    03.5
03FF:  MOVWF  21
0400:  BTFSS  21.7
0401:  GOTO   404
0402:  BSF    26.7
0403:  GOTO   486
0404:  BCF    26.7
0405:  GOTO   486
0406:  BCF    03.5
0407:  MOVF   6E,W
0408:  BSF    03.5
0409:  MOVWF  26
040A:  BSF    26.7
040B:  BCF    03.5
040C:  MOVF   6F,W
040D:  BSF    03.5
040E:  MOVWF  25
040F:  MOVF   70,W
0410:  MOVWF  24
0411:  BTFSS  21.7
0412:  GOTO   417
0413:  BCF    26.7
0414:  BSF    22.2
0415:  GOTO   492
0416:  BCF    22.2
0417:  CLRF   23
0418:  BCF    20.0
0419:  MOVLW  6C
041A:  MOVWF  04
041B:  BCF    03.7
041C:  GOTO   4A7
041D:  BTFSC  21.7
041E:  GOTO   442
041F:  BCF    03.5
0420:  MOVF   6A,W
0421:  BSF    03.5
0422:  MOVWF  21
0423:  BTFSS  20.0
0424:  GOTO   42C
0425:  RRF    26,F
0426:  RRF    25,F
0427:  RRF    24,F
0428:  RRF    23,F
0429:  INCF   77,F
042A:  BTFSC  03.2
042B:  GOTO   48D
042C:  BTFSS  23.7
042D:  GOTO   43D
042E:  INCF   24,F
042F:  BTFSS  03.2
0430:  GOTO   43D
0431:  INCF   25,F
0432:  BTFSS  03.2
0433:  GOTO   43D
0434:  INCF   26,F
0435:  BTFSS  03.2
0436:  GOTO   43D
0437:  RRF    26,F
0438:  RRF    25,F
0439:  RRF    24,F
043A:  INCF   77,F
043B:  BTFSC  03.2
043C:  GOTO   48D
043D:  BTFSC  22.6
043E:  GOTO   3AD
043F:  BTFSC  22.7
0440:  GOTO   3FB
0441:  GOTO   465
0442:  MOVLW  80
0443:  XORWF  26,F
0444:  BTFSS  26.7
0445:  GOTO   44C
0446:  GOTO   492
0447:  BCF    03.5
0448:  MOVF   6E,W
0449:  BSF    03.5
044A:  MOVWF  21
044B:  GOTO   45B
044C:  BCF    03.5
044D:  MOVF   6A,W
044E:  BSF    03.5
044F:  MOVWF  21
0450:  MOVF   26,F
0451:  BTFSS  03.2
0452:  GOTO   45B
0453:  MOVF   25,F
0454:  BTFSS  03.2
0455:  GOTO   45B
0456:  MOVF   24,F
0457:  BTFSS  03.2
0458:  GOTO   45B
0459:  CLRF   77
045A:  GOTO   486
045B:  BTFSC  26.7
045C:  GOTO   465
045D:  BCF    03.0
045E:  RLF    23,F
045F:  RLF    24,F
0460:  RLF    25,F
0461:  RLF    26,F
0462:  DECFSZ 77,F
0463:  GOTO   45B
0464:  GOTO   48D
0465:  BTFSS  21.7
0466:  GOTO   469
0467:  BSF    26.7
0468:  GOTO   486
0469:  BCF    26.7
046A:  GOTO   486
046B:  BCF    03.5
046C:  MOVF   6D,W
046D:  MOVWF  77
046E:  MOVF   6E,W
046F:  BSF    03.5
0470:  MOVWF  26
0471:  BCF    03.5
0472:  MOVF   6F,W
0473:  BSF    03.5
0474:  MOVWF  25
0475:  MOVF   70,W
0476:  MOVWF  24
0477:  GOTO   486
0478:  BCF    03.5
0479:  MOVF   69,W
047A:  MOVWF  77
047B:  MOVF   6A,W
047C:  BSF    03.5
047D:  MOVWF  26
047E:  BCF    03.5
047F:  MOVF   6B,W
0480:  BSF    03.5
0481:  MOVWF  25
0482:  BCF    03.5
0483:  MOVF   6C,W
0484:  BSF    03.5
0485:  MOVWF  24
0486:  MOVF   26,W
0487:  MOVWF  78
0488:  MOVF   25,W
0489:  MOVWF  79
048A:  MOVF   24,W
048B:  MOVWF  7A
048C:  GOTO   4C5
048D:  CLRF   77
048E:  CLRF   78
048F:  CLRF   79
0490:  CLRF   7A
0491:  GOTO   4C5
0492:  CLRF   23
0493:  COMF   24,F
0494:  COMF   25,F
0495:  COMF   26,F
0496:  COMF   23,F
0497:  INCF   23,F
0498:  BTFSS  03.2
0499:  GOTO   4A0
049A:  INCF   24,F
049B:  BTFSS  03.2
049C:  GOTO   4A0
049D:  INCF   25,F
049E:  BTFSC  03.2
049F:  INCF   26,F
04A0:  BTFSC  22.0
04A1:  GOTO   38C
04A2:  BTFSC  22.1
04A3:  GOTO   3DA
04A4:  BTFSC  22.2
04A5:  GOTO   416
04A6:  GOTO   447
04A7:  MOVF   00,W
04A8:  ADDWF  24,F
04A9:  BTFSS  03.0
04AA:  GOTO   4B1
04AB:  INCF   25,F
04AC:  BTFSS  03.2
04AD:  GOTO   4B1
04AE:  INCF   26,F
04AF:  BTFSC  03.2
04B0:  BSF    20.0
04B1:  DECF   04,F
04B2:  MOVF   00,W
04B3:  ADDWF  25,F
04B4:  BTFSS  03.0
04B5:  GOTO   4B9
04B6:  INCF   26,F
04B7:  BTFSC  03.2
04B8:  BSF    20.0
04B9:  DECF   04,F
04BA:  MOVF   00,W
04BB:  BTFSS  00.7
04BC:  XORLW  80
04BD:  ADDWF  26,F
04BE:  BTFSC  03.0
04BF:  BSF    20.0
04C0:  BTFSC  22.4
04C1:  GOTO   393
04C2:  BTFSC  22.5
04C3:  GOTO   3E1
04C4:  GOTO   41D
*
04F3:  DATA 0A,3B
04F4:  DATA 61,36
04F5:  DATA F5,32
04F6:  DATA B2,1E
04F7:  DATA A0,12
04F8:  DATA 66,00
04F9:  DATA 8C,3B
04FA:  DATA 65,36
04FB:  DATA E3,37
04FC:  DATA ED,32
04FD:  DATA 00,00
*
0582:  BCF    03.6
0583:  MOVF   0B,W
0584:  MOVWF  42
0585:  BCF    0B.7
0586:  BSF    03.5
0587:  BSF    03.6
0588:  BSF    0C.7
0589:  BSF    0C.0
058A:  NOP
058B:  NOP
058C:  BCF    03.5
058D:  BCF    03.6
058E:  BTFSC  42.7
058F:  BSF    0B.7
0590:  BSF    03.6
0591:  MOVF   0C,W
0592:  ANDLW  7F
0593:  BTFSC  03.2
0594:  GOTO   5D5
0595:  BCF    03.6
0596:  MOVWF  42
0597:  BSF    03.6
0598:  MOVF   0D,W
0599:  BCF    03.6
059A:  MOVWF  43
059B:  BSF    03.6
059C:  MOVF   0F,W
059D:  BCF    03.6
059E:  MOVWF  44
059F:  MOVF   42,W
05A0:  MOVWF  76
05A1:  CALL   093
05A2:  MOVF   43,W
05A3:  BSF    03.6
05A4:  MOVWF  0D
05A5:  BCF    03.6
05A6:  MOVF   44,W
05A7:  BSF    03.6
05A8:  MOVWF  0F
05A9:  BCF    03.6
05AA:  MOVF   0B,W
05AB:  MOVWF  45
05AC:  BCF    0B.7
05AD:  BSF    03.5
05AE:  BSF    03.6
05AF:  BSF    0C.7
05B0:  BSF    0C.0
05B1:  NOP
05B2:  NOP
05B3:  BCF    03.5
05B4:  BCF    03.6
05B5:  BTFSC  45.7
05B6:  BSF    0B.7
05B7:  BSF    03.6
05B8:  RLF    0C,W
05B9:  RLF    0E,W
05BA:  ANDLW  7F
05BB:  BTFSC  03.2
05BC:  GOTO   5D5
05BD:  BCF    03.6
05BE:  MOVWF  42
05BF:  BSF    03.6
05C0:  MOVF   0D,W
05C1:  BCF    03.6
05C2:  MOVWF  43
05C3:  BSF    03.6
05C4:  MOVF   0F,W
05C5:  BCF    03.6
05C6:  MOVWF  44
05C7:  MOVF   42,W
05C8:  MOVWF  76
05C9:  CALL   093
05CA:  MOVF   43,W
05CB:  BSF    03.6
05CC:  MOVWF  0D
05CD:  BCF    03.6
05CE:  MOVF   44,W
05CF:  BSF    03.6
05D0:  MOVWF  0F
05D1:  INCF   0D,F
05D2:  BTFSC  03.2
05D3:  INCF   0F,F
05D4:  GOTO   582
....................  
.................... #list 
....................  
.................... #fuses NOMCLR, NOBROWNOUT, NOLVP, INTRC_IO 
.................... #use delay(clock = 4MHz) 
*
0016:  MOVLW  7B
0017:  MOVWF  04
0018:  BCF    03.7
0019:  MOVF   00,W
001A:  BTFSC  03.2
001B:  GOTO   02A
001C:  MOVLW  01
001D:  MOVWF  78
001E:  CLRF   77
001F:  DECFSZ 77,F
0020:  GOTO   01F
0021:  DECFSZ 78,F
0022:  GOTO   01E
0023:  MOVLW  4A
0024:  MOVWF  77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  GOTO   028
0028:  DECFSZ 00,F
0029:  GOTO   01C
002A:  RETURN
.................... #use fast_io(B) 
.................... #use rtos(timer = 0, minor_cycle = 40ms) 
.................... #use rs232(baud=9600, xmit=pin_c6, rcv=pin_c7, bits=8,parity=N, ERRORS) 
.................... #include "flex_lcdk1.c" 
.................... // flex_lcd.c  
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_A0 
.................... #define LCD_DB5   PIN_A1  
.................... #define LCD_DB6   PIN_A2 
.................... #define LCD_DB7   PIN_A3 
....................  
.................... #define LCD_E     PIN_A4 
.................... #define LCD_RS    PIN_c5  
.................... //#define LCD_RW    PIN_c1 
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... //#define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
002B:  BSF    03.5
002C:  BTFSC  23.0
002D:  GOTO   032
002E:  BCF    03.5
002F:  BCF    05.0
0030:  GOTO   034
0031:  BSF    03.5
0032:  BCF    03.5
0033:  BSF    05.0
0034:  BSF    03.5
0035:  BCF    05.0
....................  output_bit(LCD_DB5, !!(nibble & 2));   
0036:  BTFSC  23.1
0037:  GOTO   03C
0038:  BCF    03.5
0039:  BCF    05.1
003A:  GOTO   03E
003B:  BSF    03.5
003C:  BCF    03.5
003D:  BSF    05.1
003E:  BSF    03.5
003F:  BCF    05.1
....................  output_bit(LCD_DB6, !!(nibble & 4));     
0040:  BTFSC  23.2
0041:  GOTO   046
0042:  BCF    03.5
0043:  BCF    05.2
0044:  GOTO   048
0045:  BSF    03.5
0046:  BCF    03.5
0047:  BSF    05.2
0048:  BSF    03.5
0049:  BCF    05.2
....................  output_bit(LCD_DB7, !!(nibble & 8));     
004A:  BTFSC  23.3
004B:  GOTO   050
004C:  BCF    03.5
004D:  BCF    05.3
004E:  GOTO   052
004F:  BSF    03.5
0050:  BCF    03.5
0051:  BSF    05.3
0052:  BSF    03.5
0053:  BCF    05.3
....................  
....................  delay_cycles(1);  
0054:  NOP
....................  output_high(LCD_E);  
0055:  BCF    05.4
0056:  BCF    03.5
0057:  BSF    05.4
....................  delay_us(2);  
0058:  GOTO   059
....................  output_low(LCD_E);  
0059:  BSF    03.5
005A:  BCF    05.4
005B:  BCF    03.5
005C:  BCF    05.4
005D:  RETURN
.................... }  
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
....................      
.................... output_high(LCD_E);  
.................... delay_cycles(1);  
....................  
.................... retval_0 = input(LCD_DB4);  
.................... retval_1 = input(LCD_DB5);  
.................... retval_2 = input(LCD_DB6);  
.................... retval_3 = input(LCD_DB7);  
....................    
.................... output_low(LCD_E);  
....................      
.................... return(retval);     
.................... }     
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
.................... delay_cycles(1);  
....................  
.................... high = lcd_read_nibble();  
....................  
.................... low = lcd_read_nibble();  
....................  
.................... return( (high<<4) | low);  
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
005E:  BCF    22.5
005F:  MOVF   22,W
0060:  BSF    03.5
0061:  MOVWF  07
0062:  BCF    03.5
0063:  BCF    07.5
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
.................... #else  
.................... delay_us(60);   
0064:  MOVLW  13
0065:  MOVWF  77
0066:  DECFSZ 77,F
0067:  GOTO   066
0068:  GOTO   069
.................... #endif  
....................  
.................... if(address)  
0069:  BSF    03.5
006A:  MOVF   20,F
006B:  BTFSC  03.2
006C:  GOTO   076
....................    output_high(LCD_RS);  
006D:  BCF    03.5
006E:  BCF    22.5
006F:  MOVF   22,W
0070:  BSF    03.5
0071:  MOVWF  07
0072:  BCF    03.5
0073:  BSF    07.5
0074:  GOTO   07D
0075:  BSF    03.5
.................... else  
....................    output_low(LCD_RS);  
0076:  BCF    03.5
0077:  BCF    22.5
0078:  MOVF   22,W
0079:  BSF    03.5
007A:  MOVWF  07
007B:  BCF    03.5
007C:  BCF    07.5
....................        
....................  delay_cycles(1);  
007D:  NOP
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
.................... delay_cycles(1);  
.................... #endif  
....................  
.................... output_low(LCD_E);  
007E:  BSF    03.5
007F:  BCF    05.4
0080:  BCF    03.5
0081:  BCF    05.4
....................  
.................... lcd_send_nibble(n >> 4);  
0082:  BSF    03.5
0083:  SWAPF  21,W
0084:  MOVWF  22
0085:  MOVLW  0F
0086:  ANDWF  22,F
0087:  MOVF   22,W
0088:  MOVWF  23
0089:  BCF    03.5
008A:  CALL   02B
.................... lcd_send_nibble(n & 0xf);  
008B:  BSF    03.5
008C:  MOVF   21,W
008D:  ANDLW  0F
008E:  MOVWF  22
008F:  MOVWF  23
0090:  BCF    03.5
0091:  CALL   02B
0092:  RETURN
.................... }  
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
*
04FE:  BCF    22.5
04FF:  MOVF   22,W
0500:  BSF    03.5
0501:  MOVWF  07
0502:  BCF    03.5
0503:  BCF    07.5
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
.................... #endif  
....................  
.................... output_low(LCD_E);  
0504:  BSF    03.5
0505:  BCF    05.4
0506:  BCF    03.5
0507:  BCF    05.4
....................  
.................... delay_ms(15);  
0508:  MOVLW  0F
0509:  MOVWF  7B
050A:  CALL   016
....................  
.................... for(i=0 ;i < 3; i++)  
050B:  CLRF   42
050C:  MOVF   42,W
050D:  SUBLW  02
050E:  BTFSS  03.0
050F:  GOTO   51A
....................    {  
....................     lcd_send_nibble(0x03);  
0510:  MOVLW  03
0511:  BSF    03.5
0512:  MOVWF  23
0513:  BCF    03.5
0514:  CALL   02B
....................     delay_ms(5);  
0515:  MOVLW  05
0516:  MOVWF  7B
0517:  CALL   016
0518:  INCF   42,F
0519:  GOTO   50C
....................    }  
....................  
.................... lcd_send_nibble(0x02);  
051A:  MOVLW  02
051B:  BSF    03.5
051C:  MOVWF  23
051D:  BCF    03.5
051E:  CALL   02B
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
051F:  CLRF   42
0520:  MOVF   42,W
0521:  SUBLW  03
0522:  BTFSS  03.0
0523:  GOTO   534
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
0524:  MOVF   42,W
0525:  CALL   004
0526:  MOVWF  43
0527:  BSF    03.5
0528:  CLRF   20
0529:  BCF    03.5
052A:  MOVF   43,W
052B:  BSF    03.5
052C:  MOVWF  21
052D:  BCF    03.5
052E:  CALL   05E
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
....................     delay_ms(5);  
052F:  MOVLW  05
0530:  MOVWF  7B
0531:  CALL   016
....................     #endif  
0532:  INCF   42,F
0533:  GOTO   520
....................    }  
0534:  BCF    0A.3
0535:  BCF    0A.4
0536:  GOTO   566 (RETURN)
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
*
00AC:  DECFSZ 7C,W
00AD:  GOTO   0AF
00AE:  GOTO   0B2
....................    address = lcd_line_two;  
00AF:  MOVLW  40
00B0:  MOVWF  7D
00B1:  GOTO   0B3
.................... else  
....................    address=0;  
00B2:  CLRF   7D
....................  
.................... address += x-1;  
00B3:  MOVLW  01
00B4:  SUBWF  7B,W
00B5:  ADDWF  7D,F
.................... lcd_send_byte(0, 0x80 | address);  
00B6:  MOVF   7D,W
00B7:  IORLW  80
00B8:  MOVWF  7E
00B9:  BSF    03.5
00BA:  CLRF   20
00BB:  MOVF   7E,W
00BC:  MOVWF  21
00BD:  BCF    03.5
00BE:  CALL   05E
.................... }  
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
*
0093:  MOVF   76,W
0094:  XORLW  0C
0095:  BTFSC  03.2
0096:  GOTO   09E
0097:  XORLW  06
0098:  BTFSC  03.2
0099:  GOTO   0A8
009A:  XORLW  02
009B:  BTFSC  03.2
009C:  GOTO   0C0
009D:  GOTO   0C7
....................    {  
....................     case '\f':  
....................       lcd_send_byte(0,1);  
009E:  BSF    03.5
009F:  CLRF   20
00A0:  MOVLW  01
00A1:  MOVWF  21
00A2:  BCF    03.5
00A3:  CALL   05E
....................       delay_ms(2);  
00A4:  MOVLW  02
00A5:  MOVWF  7B
00A6:  CALL   016
....................       break;  
00A7:  GOTO   0CE
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
00A8:  MOVLW  01
00A9:  MOVWF  7B
00AA:  MOVLW  02
00AB:  MOVWF  7C
....................        break;  
*
00BF:  GOTO   0CE
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
00C0:  BSF    03.5
00C1:  CLRF   20
00C2:  MOVLW  10
00C3:  MOVWF  21
00C4:  BCF    03.5
00C5:  CALL   05E
....................        break;  
00C6:  GOTO   0CE
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
00C7:  MOVLW  01
00C8:  BSF    03.5
00C9:  MOVWF  20
00CA:  MOVF   76,W
00CB:  MOVWF  21
00CC:  BCF    03.5
00CD:  CALL   05E
....................        break;  
....................    }  
00CE:  RETURN
.................... }  
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
.................... float s=0; 
.................... float g; 
....................  
.................... #task(rate = 1000ms, max = 10ms) // 1st RTOS task (executed every 250ms) 
.................... void ADC(){ 
.................... set_adc_channel(12); 
*
02D0:  MOVLW  30
02D1:  MOVWF  78
02D2:  MOVF   1F,W
02D3:  ANDLW  C3
02D4:  IORWF  78,W
02D5:  MOVWF  1F
.................... delay_ms(10); 
02D6:  MOVLW  0A
02D7:  MOVWF  7B
02D8:  CALL   016
.................... g = read_adc();  
02D9:  BSF    1F.1
02DA:  BTFSC  1F.1
02DB:  GOTO   2DA
02DC:  MOVF   1E,W
02DD:  CLRF   4F
02DE:  MOVWF  4E
*
02FB:  MOVF   7A,W
02FC:  MOVWF  2A
02FD:  MOVF   79,W
02FE:  MOVWF  29
02FF:  MOVF   78,W
0300:  MOVWF  28
0301:  MOVF   77,W
0302:  MOVWF  27
.................... delay_ms(10); 
0303:  MOVLW  0A
0304:  MOVWF  7B
0305:  CALL   016
.................... //g=5*(g/1023); 
.................... delay_ms(10); 
0306:  MOVLW  0A
0307:  MOVWF  7B
0308:  CALL   016
.................... printf(lcd_putc,"\fvalue= %f",g); 
0309:  MOVLW  2A
030A:  BSF    03.6
030B:  MOVWF  0D
030C:  MOVLW  03
030D:  MOVWF  0F
030E:  BCF    03.0
030F:  MOVLW  08
0310:  BCF    03.6
0311:  MOVWF  69
0312:  CALL   0CF
0313:  MOVLW  89
0314:  MOVWF  04
0315:  MOVF   2A,W
0316:  MOVWF  6C
0317:  MOVF   29,W
0318:  MOVWF  6B
0319:  MOVF   28,W
031A:  MOVWF  6A
031B:  MOVF   27,W
031C:  MOVWF  69
031D:  MOVLW  02
031E:  MOVWF  6D
031F:  CALL   177
.................... delay_ms(100); 
0320:  MOVLW  64
0321:  MOVWF  7B
0322:  CALL   016
0323:  MOVLW  D0
0324:  MOVWF  30
0325:  MOVLW  02
0326:  MOVWF  31
0327:  BCF    0A.3
0328:  BCF    0A.4
0329:  GOTO   642
....................  
.................... } 
.................... #task(rate = 1000ms, max = 10ms) // 2nd RTOS task (executed every 500ms) 
.................... void led(){ 
.................... if(input(pin_c3)==1) 
*
0330:  BSF    22.3
0331:  MOVF   22,W
0332:  BSF    03.5
0333:  MOVWF  07
0334:  BCF    03.5
0335:  BTFSS  07.3
0336:  GOTO   33D
.................... { 
....................   output_toggle(PIN_D1); 
0337:  BSF    03.5
0338:  BCF    08.1
0339:  MOVLW  02
033A:  BCF    03.5
033B:  XORWF  08,F
.................... }else { 
033C:  GOTO   341
.................... output_low(PIN_D1); 
033D:  BSF    03.5
033E:  BCF    08.1
033F:  BCF    03.5
0340:  BCF    08.1
.................... } 
0341:  MOVLW  30
0342:  MOVWF  37
0343:  MOVLW  03
0344:  MOVWF  38
0345:  BCF    0A.3
0346:  BCF    0A.4
0347:  GOTO   642
.................... } 
.................... #task(rate = 1000ms, max = 10ms) // 3rd RTOS task (executed every 750ms) 
.................... void led3(){ 
.................... s=g+1; 
0348:  BCF    03.1
0349:  MOVF   2A,W
034A:  MOVWF  6C
034B:  MOVF   29,W
034C:  MOVWF  6B
034D:  MOVF   28,W
034E:  MOVWF  6A
034F:  MOVF   27,W
0350:  MOVWF  69
0351:  CLRF   70
0352:  CLRF   6F
0353:  CLRF   6E
0354:  MOVLW  7F
0355:  MOVWF  6D
*
04C5:  MOVF   7A,W
04C6:  BCF    03.5
04C7:  MOVWF  26
04C8:  MOVF   79,W
04C9:  MOVWF  25
04CA:  MOVF   78,W
04CB:  MOVWF  24
04CC:  MOVF   77,W
04CD:  MOVWF  23
.................... printf(lcd_putc,"\nvalue2= %f",s); 
04CE:  MOVLW  F3
04CF:  BSF    03.6
04D0:  MOVWF  0D
04D1:  MOVLW  04
04D2:  MOVWF  0F
04D3:  BCF    03.0
04D4:  MOVLW  09
04D5:  BCF    03.6
04D6:  MOVWF  69
04D7:  CALL   0CF
04D8:  MOVLW  89
04D9:  MOVWF  04
04DA:  MOVF   26,W
04DB:  MOVWF  6C
04DC:  MOVF   25,W
04DD:  MOVWF  6B
04DE:  MOVF   24,W
04DF:  MOVWF  6A
04E0:  MOVF   23,W
04E1:  MOVWF  69
04E2:  MOVLW  02
04E3:  MOVWF  6D
04E4:  CALL   177
.................... delay_ms(500); 
04E5:  MOVLW  02
04E6:  MOVWF  69
04E7:  MOVLW  FA
04E8:  MOVWF  7B
04E9:  CALL   016
04EA:  DECFSZ 69,F
04EB:  GOTO   4E7
04EC:  MOVLW  48
04ED:  MOVWF  3E
04EE:  MOVLW  03
04EF:  MOVWF  3F
04F0:  BCF    0A.3
04F1:  BCF    0A.4
04F2:  GOTO   642
.................... } 
....................  
.................... void main() 
*
0537:  MOVF   03,W
0538:  ANDLW  1F
0539:  MOVWF  03
053A:  MOVLW  61
053B:  BSF    03.5
053C:  MOVWF  0F
053D:  CLRF   10
053E:  MOVF   0F,W
053F:  BCF    03.5
0540:  CLRF   21
0541:  BSF    03.5
0542:  BSF    03.6
0543:  BCF    07.3
0544:  MOVLW  19
0545:  BCF    03.6
0546:  MOVWF  19
0547:  MOVLW  A6
0548:  MOVWF  18
0549:  MOVLW  90
054A:  BCF    03.5
054B:  MOVWF  18
054C:  MOVLW  FF
054D:  MOVWF  22
054E:  CLRF   26
054F:  CLRF   25
0550:  CLRF   24
0551:  CLRF   23
0552:  CLRF   41
0553:  CLRF   40
0554:  BSF    03.5
0555:  BSF    03.6
0556:  MOVF   09,W
0557:  ANDLW  C0
0558:  MOVWF  09
0559:  BCF    03.6
055A:  BCF    1F.4
055B:  BCF    1F.5
055C:  MOVLW  00
055D:  BSF    03.6
055E:  MOVWF  08
055F:  BCF    03.5
0560:  CLRF   07
0561:  CLRF   08
0562:  CLRF   09
0563:  BCF    03.7
.................... { 
.................... lcd_init();  
0564:  BCF    03.6
0565:  GOTO   4FE
.................... setup_adc(ADC_CLOCK_INTERNAL); // initialize ADC with a sampling rate of Crystal/4 MHz 
0566:  BSF    1F.6
0567:  BSF    1F.7
0568:  BSF    03.5
0569:  BCF    1F.7
056A:  BCF    03.5
056B:  BSF    1F.0
....................    setup_adc_ports(CP2_B3_A2); // set PIN_A0 as analog input channel 
056C:  BSF    03.5
056D:  BSF    03.6
056E:  MOVF   09,W
056F:  ANDLW  C0
0570:  IORLW  84
0571:  MOVWF  09
0572:  BCF    03.6
0573:  BCF    1F.4
0574:  BCF    1F.5
0575:  MOVLW  00
0576:  BSF    03.6
0577:  MOVWF  08
.................... delay_ms(5); 
0578:  MOVLW  05
0579:  MOVWF  7B
057A:  BCF    03.5
057B:  BCF    03.6
057C:  CALL   016
.................... printf(lcd_putc,"\fwelcome"); 
057D:  MOVLW  F9
057E:  BSF    03.6
057F:  MOVWF  0D
0580:  MOVLW  04
0581:  MOVWF  0F
.................... delay_ms(1000);  
*
05D5:  MOVLW  04
05D6:  BCF    03.6
05D7:  MOVWF  42
05D8:  MOVLW  FA
05D9:  MOVWF  7B
05DA:  CALL   016
05DB:  DECFSZ 42,F
05DC:  GOTO   5D8
.................... setup_oscillator(OSC_4MHZ); // Set the internal oscillator to 8MHz 
05DD:  MOVLW  61
05DE:  BSF    03.5
05DF:  MOVWF  0F
05E0:  CLRF   10
05E1:  MOVF   0F,W
....................  // output_b(0); // All PORTB register pins are zeros 
....................   //set_tris_b(0); // Configure PORTB pins as outputs 
....................   rtos_run(); // Start all the RTOS tasks 
05E2:  BCF    03.5
05E3:  CLRF   2B
05E4:  CLRF   2D
05E5:  MOVLW  19
05E6:  MOVWF  2C
05E7:  CLRF   2F
05E8:  CLRF   2E
05E9:  MOVLW  D0
05EA:  MOVWF  30
05EB:  MOVLW  02
05EC:  MOVWF  31
05ED:  CLRF   32
05EE:  CLRF   34
05EF:  MOVLW  19
05F0:  MOVWF  33
05F1:  CLRF   36
05F2:  MOVLW  01
05F3:  MOVWF  35
05F4:  MOVLW  30
05F5:  MOVWF  37
05F6:  MOVLW  03
05F7:  MOVWF  38
05F8:  CLRF   39
05F9:  CLRF   3B
05FA:  MOVLW  19
05FB:  MOVWF  3A
05FC:  CLRF   3D
05FD:  MOVLW  02
05FE:  MOVWF  3C
05FF:  MOVLW  48
0600:  MOVWF  3E
0601:  MOVLW  03
0602:  MOVWF  3F
0603:  CLRF   20
0604:  BSF    03.5
0605:  MOVF   01,W
0606:  ANDLW  C0
0607:  IORLW  07
0608:  MOVWF  01
0609:  MOVLW  64
060A:  BCF    03.5
060B:  MOVWF  01
060C:  BCF    0B.2
060D:  BCF    03.0
060E:  RLF    20,W
060F:  MOVWF  77
0610:  CALL   00C
0611:  MOVWF  79
0612:  MOVLW  01
0613:  ADDWF  77,W
0614:  CALL   00C
0615:  MOVWF  7A
0616:  MOVF   79,W
0617:  MOVWF  04
0618:  BCF    03.7
0619:  BTFSC  7A.0
061A:  BSF    03.7
061B:  MOVF   00,W
061C:  MOVWF  79
061D:  INCF   04,F
061E:  MOVF   00,W
061F:  MOVWF  77
0620:  INCF   04,F
0621:  MOVF   00,W
0622:  MOVWF  78
0623:  INCF   04,F
0624:  INCF   00,F
0625:  MOVF   00,W
0626:  MOVWF  7A
0627:  BTFSS  03.2
0628:  GOTO   62C
0629:  INCF   04,F
062A:  INCF   00,F
062B:  DECF   04,F
062C:  INCF   04,F
062D:  MOVF   00,W
062E:  SUBWF  78,W
062F:  BTFSS  03.2
0630:  GOTO   644
0631:  MOVF   77,W
0632:  SUBWF  7A,W
0633:  BTFSS  03.2
0634:  GOTO   644
0635:  DECF   04,F
0636:  CLRF   00
0637:  INCF   04,F
0638:  CLRF   00
0639:  INCF   04,F
063A:  BTFSC  79.7
063B:  GOTO   644
063C:  INCF   04,F
063D:  MOVF   00,W
063E:  MOVWF  0A
063F:  DECF   04,F
0640:  MOVF   00,W
0641:  MOVWF  02
0642:  BCF    03.5
0643:  BCF    03.6
0644:  INCF   20,F
0645:  MOVLW  03
0646:  SUBWF  20,W
0647:  BTFSS  03.2
0648:  GOTO   60D
0649:  CLRF   20
064A:  MOVF   01,W
064B:  BTFSS  0B.2
064C:  GOTO   64F
064D:  BSF    03.5
064E:  GOTO   609
064F:  GOTO   64A
0650:  MOVLW  FF
0651:  MOVWF  20
.................... } 
0652:  SLEEP

Configuration Fuses:
   Word  1: 2CC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
