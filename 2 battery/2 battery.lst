CCS PCM C Compiler, Version 5.049, 5967               01-Aug-24 13:34

               Filename:   E:\san tech\Bhavankumar D Output\PIC\2 battery\2 battery.lst

               ROM used:   1296 words (16%)
                           Largest free fragment is 2048
               RAM used:   55 (15%) at main() level
                           80 (22%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   39D
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,21
000D:  DATA 31,1D
000E:  DATA 25,33
000F:  DATA 00,00
0010:  DATA 0A,21
0011:  DATA 32,1D
0012:  DATA 25,33
0013:  DATA 00,00
*
0112:  MOVLW  8E
0113:  MOVWF  77
0114:  MOVF   52,W
0115:  MOVWF  78
0116:  MOVF   51,W
0117:  MOVWF  79
0118:  CLRF   7A
0119:  MOVF   78,F
011A:  BTFSS  03.2
011B:  GOTO   126
011C:  MOVF   79,W
011D:  MOVWF  78
011E:  CLRF   79
011F:  MOVLW  08
0120:  SUBWF  77,F
0121:  MOVF   78,F
0122:  BTFSS  03.2
0123:  GOTO   126
0124:  CLRF   77
0125:  GOTO   12E
0126:  BCF    03.0
0127:  BTFSC  78.7
0128:  GOTO   12D
0129:  RLF    79,F
012A:  RLF    78,F
012B:  DECF   77,F
012C:  GOTO   126
012D:  BCF    78.7
012E:  RETURN
012F:  MOVF   5E,W
0130:  BTFSC  03.2
0131:  GOTO   19F
0132:  MOVWF  66
0133:  MOVF   62,W
0134:  BTFSC  03.2
0135:  GOTO   19F
0136:  ADDWF  66,F
0137:  BTFSC  03.0
0138:  GOTO   140
0139:  MOVLW  7F
013A:  SUBWF  66,F
013B:  BTFSS  03.0
013C:  GOTO   19F
013D:  BTFSC  03.2
013E:  GOTO   19F
013F:  GOTO   144
0140:  MOVLW  81
0141:  ADDWF  66,F
0142:  BTFSC  03.0
0143:  GOTO   19F
0144:  MOVF   66,W
0145:  MOVWF  77
0146:  CLRF   78
0147:  CLRF   79
0148:  CLRF   7A
0149:  MOVF   5F,W
014A:  MOVWF  6A
014B:  BSF    6A.7
014C:  MOVF   60,W
014D:  MOVWF  69
014E:  MOVF   61,W
014F:  MOVWF  68
0150:  MOVLW  18
0151:  MOVWF  66
0152:  CLRF   67
0153:  BTFSS  68.0
0154:  GOTO   16D
0155:  MOVF   65,W
0156:  ADDWF  7A,F
0157:  BTFSS  03.0
0158:  GOTO   15F
0159:  INCF   79,F
015A:  BTFSS  03.2
015B:  GOTO   15F
015C:  INCF   78,F
015D:  BTFSC  03.2
015E:  BSF    67.7
015F:  MOVF   64,W
0160:  ADDWF  79,F
0161:  BTFSS  03.0
0162:  GOTO   166
0163:  INCF   78,F
0164:  BTFSC  03.2
0165:  BSF    67.7
0166:  MOVF   63,W
0167:  MOVWF  60
0168:  BSF    60.7
0169:  MOVF   60,W
016A:  ADDWF  78,F
016B:  BTFSC  03.0
016C:  BSF    67.7
016D:  RLF    67,F
016E:  RRF    78,F
016F:  RRF    79,F
0170:  RRF    7A,F
0171:  RRF    6A,F
0172:  RRF    69,F
0173:  RRF    68,F
0174:  BCF    03.0
0175:  DECFSZ 66,F
0176:  GOTO   152
0177:  MOVLW  01
0178:  ADDWF  77,F
0179:  BTFSC  03.0
017A:  GOTO   19F
017B:  BTFSC  78.7
017C:  GOTO   184
017D:  RLF    6A,F
017E:  RLF    7A,F
017F:  RLF    79,F
0180:  RLF    78,F
0181:  DECF   77,F
0182:  BTFSC  03.2
0183:  GOTO   19F
0184:  BTFSS  6A.7
0185:  GOTO   195
0186:  INCF   7A,F
0187:  BTFSS  03.2
0188:  GOTO   195
0189:  INCF   79,F
018A:  BTFSS  03.2
018B:  GOTO   195
018C:  INCF   78,F
018D:  BTFSS  03.2
018E:  GOTO   195
018F:  RRF    78,F
0190:  RRF    79,F
0191:  RRF    7A,F
0192:  INCF   77,F
0193:  BTFSC  03.2
0194:  GOTO   19F
0195:  MOVF   5F,W
0196:  MOVWF  67
0197:  MOVF   63,W
0198:  XORWF  67,F
0199:  BTFSS  67.7
019A:  GOTO   19D
019B:  BSF    78.7
019C:  GOTO   1A3
019D:  BCF    78.7
019E:  GOTO   1A3
019F:  CLRF   77
01A0:  CLRF   78
01A1:  CLRF   79
01A2:  CLRF   7A
01A3:  RETURN
01A4:  MOVF   52,W
01A5:  MOVWF  59
01A6:  MOVF   56,W
01A7:  XORWF  59,F
01A8:  BTFSS  59.7
01A9:  GOTO   1AF
01AA:  BCF    03.2
01AB:  BCF    03.0
01AC:  BTFSC  52.7
01AD:  BSF    03.0
01AE:  GOTO   1E2
01AF:  MOVF   52,W
01B0:  MOVWF  59
01B1:  MOVF   55,W
01B2:  MOVWF  5A
01B3:  MOVF   51,W
01B4:  SUBWF  5A,F
01B5:  BTFSC  03.2
01B6:  GOTO   1BD
01B7:  BTFSS  59.7
01B8:  GOTO   1E2
01B9:  MOVF   03,W
01BA:  XORLW  01
01BB:  MOVWF  03
01BC:  GOTO   1E2
01BD:  MOVF   56,W
01BE:  MOVWF  5A
01BF:  MOVF   52,W
01C0:  SUBWF  5A,F
01C1:  BTFSC  03.2
01C2:  GOTO   1C9
01C3:  BTFSS  59.7
01C4:  GOTO   1E2
01C5:  MOVF   03,W
01C6:  XORLW  01
01C7:  MOVWF  03
01C8:  GOTO   1E2
01C9:  MOVF   57,W
01CA:  MOVWF  5A
01CB:  MOVF   53,W
01CC:  SUBWF  5A,F
01CD:  BTFSC  03.2
01CE:  GOTO   1D5
01CF:  BTFSS  59.7
01D0:  GOTO   1E2
01D1:  MOVF   03,W
01D2:  XORLW  01
01D3:  MOVWF  03
01D4:  GOTO   1E2
01D5:  MOVF   58,W
01D6:  MOVWF  5A
01D7:  MOVF   54,W
01D8:  SUBWF  5A,F
01D9:  BTFSC  03.2
01DA:  GOTO   1E1
01DB:  BTFSS  59.7
01DC:  GOTO   1E2
01DD:  MOVF   03,W
01DE:  XORLW  01
01DF:  MOVWF  03
01E0:  GOTO   1E2
01E1:  BCF    03.0
01E2:  RETURN
*
0217:  MOVF   0B,W
0218:  MOVWF  52
0219:  BCF    0B.7
021A:  BSF    03.5
021B:  BSF    03.6
021C:  BSF    0C.7
021D:  BSF    0C.0
021E:  NOP
021F:  NOP
0220:  BCF    03.5
0221:  BCF    03.6
0222:  BTFSC  52.7
0223:  BSF    0B.7
0224:  BTFSC  03.0
0225:  GOTO   24E
0226:  BSF    03.6
0227:  MOVF   0C,W
0228:  ANDLW  7F
0229:  BCF    03.6
022A:  MOVWF  52
022B:  BSF    03.6
022C:  MOVF   0D,W
022D:  BCF    03.6
022E:  MOVWF  53
022F:  BSF    03.6
0230:  MOVF   0F,W
0231:  BCF    03.6
0232:  MOVWF  54
0233:  MOVF   52,W
0234:  MOVWF  5E
0235:  CALL   1E3
0236:  MOVF   53,W
0237:  BSF    03.6
0238:  MOVWF  0D
0239:  BCF    03.6
023A:  MOVF   54,W
023B:  BSF    03.6
023C:  MOVWF  0F
023D:  BCF    03.6
023E:  MOVF   0B,W
023F:  MOVWF  55
0240:  BCF    0B.7
0241:  BSF    03.5
0242:  BSF    03.6
0243:  BSF    0C.7
0244:  BSF    0C.0
0245:  NOP
0246:  NOP
0247:  BCF    03.5
0248:  BCF    03.6
0249:  BTFSC  55.7
024A:  BSF    0B.7
024B:  DECFSZ 51,F
024C:  GOTO   24E
024D:  GOTO   26D
024E:  BSF    03.6
024F:  RLF    0C,W
0250:  RLF    0E,W
0251:  ANDLW  7F
0252:  BCF    03.6
0253:  MOVWF  52
0254:  BSF    03.6
0255:  MOVF   0D,W
0256:  BCF    03.6
0257:  MOVWF  53
0258:  BSF    03.6
0259:  MOVF   0F,W
025A:  BCF    03.6
025B:  MOVWF  54
025C:  MOVF   52,W
025D:  MOVWF  5E
025E:  CALL   1E3
025F:  MOVF   53,W
0260:  BSF    03.6
0261:  MOVWF  0D
0262:  BCF    03.6
0263:  MOVF   54,W
0264:  BSF    03.6
0265:  MOVWF  0F
0266:  INCF   0D,F
0267:  BTFSC  03.2
0268:  INCF   0F,F
0269:  BCF    03.0
026A:  BCF    03.6
026B:  DECFSZ 51,F
026C:  GOTO   217
026D:  RETURN
026E:  BTFSC  03.1
026F:  GOTO   273
0270:  MOVLW  66
0271:  MOVWF  04
0272:  BCF    03.7
0273:  CLRF   77
0274:  CLRF   78
0275:  CLRF   79
0276:  CLRF   7A
0277:  CLRF   66
0278:  CLRF   67
0279:  CLRF   68
027A:  CLRF   69
027B:  MOVF   65,W
027C:  IORWF  64,W
027D:  IORWF  63,W
027E:  IORWF  62,W
027F:  BTFSC  03.2
0280:  GOTO   2B1
0281:  MOVLW  20
0282:  MOVWF  6A
0283:  BCF    03.0
0284:  RLF    5E,F
0285:  RLF    5F,F
0286:  RLF    60,F
0287:  RLF    61,F
0288:  RLF    66,F
0289:  RLF    67,F
028A:  RLF    68,F
028B:  RLF    69,F
028C:  MOVF   65,W
028D:  SUBWF  69,W
028E:  BTFSS  03.2
028F:  GOTO   29A
0290:  MOVF   64,W
0291:  SUBWF  68,W
0292:  BTFSS  03.2
0293:  GOTO   29A
0294:  MOVF   63,W
0295:  SUBWF  67,W
0296:  BTFSS  03.2
0297:  GOTO   29A
0298:  MOVF   62,W
0299:  SUBWF  66,W
029A:  BTFSS  03.0
029B:  GOTO   2AB
029C:  MOVF   62,W
029D:  SUBWF  66,F
029E:  MOVF   63,W
029F:  BTFSS  03.0
02A0:  INCFSZ 63,W
02A1:  SUBWF  67,F
02A2:  MOVF   64,W
02A3:  BTFSS  03.0
02A4:  INCFSZ 64,W
02A5:  SUBWF  68,F
02A6:  MOVF   65,W
02A7:  BTFSS  03.0
02A8:  INCFSZ 65,W
02A9:  SUBWF  69,F
02AA:  BSF    03.0
02AB:  RLF    77,F
02AC:  RLF    78,F
02AD:  RLF    79,F
02AE:  RLF    7A,F
02AF:  DECFSZ 6A,F
02B0:  GOTO   283
02B1:  MOVF   66,W
02B2:  MOVWF  00
02B3:  INCF   04,F
02B4:  MOVF   67,W
02B5:  MOVWF  00
02B6:  INCF   04,F
02B7:  MOVF   68,W
02B8:  MOVWF  00
02B9:  INCF   04,F
02BA:  MOVF   69,W
02BB:  MOVWF  00
02BC:  RETURN
02BD:  MOVF   04,W
02BE:  MOVWF  56
02BF:  MOVF   55,W
02C0:  MOVWF  58
02C1:  BTFSC  03.2
02C2:  GOTO   2DC
02C3:  MOVF   54,W
02C4:  MOVWF  61
02C5:  MOVF   53,W
02C6:  MOVWF  60
02C7:  MOVF   52,W
02C8:  MOVWF  5F
02C9:  MOVF   51,W
02CA:  MOVWF  5E
02CB:  CLRF   65
02CC:  CLRF   64
02CD:  MOVLW  20
02CE:  MOVWF  63
02CF:  MOVLW  82
02D0:  MOVWF  62
02D1:  CALL   12F
02D2:  MOVF   7A,W
02D3:  MOVWF  54
02D4:  MOVF   79,W
02D5:  MOVWF  53
02D6:  MOVF   78,W
02D7:  MOVWF  52
02D8:  MOVF   77,W
02D9:  MOVWF  51
02DA:  DECFSZ 58,F
02DB:  GOTO   2C3
02DC:  MOVF   54,W
02DD:  MOVWF  61
02DE:  MOVF   53,W
02DF:  MOVWF  60
02E0:  MOVF   52,W
02E1:  MOVWF  5F
02E2:  MOVF   51,W
02E3:  MOVWF  5E
02E4:  MOVF   5E,W
02E5:  SUBLW  B6
02E6:  MOVWF  5E
02E7:  CLRF   7A
02E8:  MOVF   5F,W
02E9:  MOVWF  62
02EA:  BSF    5F.7
02EB:  BCF    03.0
02EC:  RRF    5F,F
02ED:  RRF    60,F
02EE:  RRF    61,F
02EF:  RRF    7A,F
02F0:  RRF    79,F
02F1:  RRF    78,F
02F2:  RRF    77,F
02F3:  DECFSZ 5E,F
02F4:  GOTO   2EB
02F5:  BTFSS  62.7
02F6:  GOTO   302
02F7:  COMF   77,F
02F8:  COMF   78,F
02F9:  COMF   79,F
02FA:  COMF   7A,F
02FB:  INCF   77,F
02FC:  BTFSC  03.2
02FD:  INCF   78,F
02FE:  BTFSC  03.2
02FF:  INCF   79,F
0300:  BTFSC  03.2
0301:  INCF   7A,F
0302:  MOVF   7A,W
0303:  MOVWF  54
0304:  MOVF   79,W
0305:  MOVWF  53
0306:  MOVF   78,W
0307:  MOVWF  52
0308:  MOVF   77,W
0309:  MOVWF  51
030A:  BTFSS  54.7
030B:  GOTO   319
030C:  DECF   56,F
030D:  BSF    56.5
030E:  COMF   51,F
030F:  COMF   52,F
0310:  COMF   53,F
0311:  COMF   54,F
0312:  INCF   51,F
0313:  BTFSC  03.2
0314:  INCF   52,F
0315:  BTFSC  03.2
0316:  INCF   53,F
0317:  BTFSC  03.2
0318:  INCF   54,F
0319:  MOVLW  3B
031A:  MOVWF  5D
031B:  MOVLW  9A
031C:  MOVWF  5C
031D:  MOVLW  CA
031E:  MOVWF  5B
031F:  CLRF   5A
0320:  MOVLW  0A
0321:  MOVWF  58
0322:  MOVF   55,W
0323:  BTFSC  03.2
0324:  INCF   56,F
0325:  BSF    03.1
0326:  MOVLW  51
0327:  MOVWF  04
0328:  BCF    03.7
0329:  MOVF   54,W
032A:  MOVWF  61
032B:  MOVF   53,W
032C:  MOVWF  60
032D:  MOVF   52,W
032E:  MOVWF  5F
032F:  MOVF   51,W
0330:  MOVWF  5E
0331:  MOVF   5D,W
0332:  MOVWF  65
0333:  MOVF   5C,W
0334:  MOVWF  64
0335:  MOVF   5B,W
0336:  MOVWF  63
0337:  MOVF   5A,W
0338:  MOVWF  62
0339:  CALL   26E
033A:  MOVF   78,W
033B:  MOVF   77,F
033C:  BTFSS  03.2
033D:  GOTO   351
033E:  INCF   55,W
033F:  SUBWF  58,W
0340:  BTFSC  03.2
0341:  GOTO   351
0342:  MOVF   56,W
0343:  BTFSC  03.2
0344:  GOTO   353
0345:  ANDLW  0F
0346:  SUBWF  58,W
0347:  BTFSC  03.2
0348:  GOTO   34B
0349:  BTFSC  03.0
034A:  GOTO   383
034B:  BTFSC  56.7
034C:  GOTO   383
034D:  BTFSC  56.6
034E:  GOTO   353
034F:  MOVLW  20
0350:  GOTO   37F
0351:  MOVLW  20
0352:  ANDWF  56,F
0353:  BTFSS  56.5
0354:  GOTO   361
0355:  BCF    56.5
0356:  MOVF   55,W
0357:  BTFSS  03.2
0358:  DECF   56,F
0359:  MOVF   77,W
035A:  MOVWF  56
035B:  MOVLW  2D
035C:  MOVWF  5E
035D:  CALL   1E3
035E:  MOVF   56,W
035F:  MOVWF  77
0360:  CLRF   56
0361:  MOVF   55,W
0362:  SUBWF  58,W
0363:  BTFSS  03.2
0364:  GOTO   36F
0365:  MOVF   77,W
0366:  MOVWF  56
0367:  MOVLW  2E
0368:  MOVWF  5E
0369:  CALL   1E3
036A:  MOVF   56,W
036B:  MOVWF  77
036C:  MOVLW  20
036D:  ANDWF  56,F
036E:  MOVLW  00
036F:  MOVLW  30
0370:  BTFSS  56.5
0371:  GOTO   37F
0372:  BCF    56.5
0373:  MOVF   55,W
0374:  BTFSS  03.2
0375:  DECF   56,F
0376:  MOVF   77,W
0377:  MOVWF  56
0378:  MOVLW  2D
0379:  MOVWF  5E
037A:  CALL   1E3
037B:  MOVF   56,W
037C:  MOVWF  77
037D:  CLRF   56
037E:  MOVLW  30
037F:  ADDWF  77,F
0380:  MOVF   77,W
0381:  MOVWF  5E
0382:  CALL   1E3
0383:  BCF    03.1
0384:  MOVF   5D,W
0385:  MOVWF  61
0386:  MOVF   5C,W
0387:  MOVWF  60
0388:  MOVF   5B,W
0389:  MOVWF  5F
038A:  MOVF   5A,W
038B:  MOVWF  5E
038C:  CLRF   65
038D:  CLRF   64
038E:  CLRF   63
038F:  MOVLW  0A
0390:  MOVWF  62
0391:  CALL   26E
0392:  MOVF   7A,W
0393:  MOVWF  5D
0394:  MOVF   79,W
0395:  MOVWF  5C
0396:  MOVF   78,W
0397:  MOVWF  5B
0398:  MOVF   77,W
0399:  MOVWF  5A
039A:  DECFSZ 58,F
039B:  GOTO   325
039C:  RETURN
....................  
.................... #list 
....................  
.................... #FUSES hs,NOWDT,PUT,PROTECT,NOBROWNOUT,NOLVP,NOCPD 
.................... #device adc=10 
.................... #use delay(clock=20000000) 
*
0014:  MOVLW  5F
0015:  MOVWF  04
0016:  BCF    03.7
0017:  MOVF   00,W
0018:  BTFSC  03.2
0019:  GOTO   027
001A:  MOVLW  06
001B:  MOVWF  78
001C:  CLRF   77
001D:  DECFSZ 77,F
001E:  GOTO   01D
001F:  DECFSZ 78,F
0020:  GOTO   01C
0021:  MOVLW  7B
0022:  MOVWF  77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  DECFSZ 00,F
0026:  GOTO   01A
0027:  RETURN
.................... #include "flex_lcd.c" 
.................... // flex_lcd.c  
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
....................  
.................... #define LCD_DB4   PIN_c4 
.................... #define LCD_DB5   PIN_c5  
.................... #define LCD_DB6   PIN_c6 
.................... #define LCD_DB7   PIN_c7 
....................  
.................... #define LCD_E     PIN_c2 
.................... #define LCD_RS    PIN_c0  
.................... #define LCD_RW    PIN_c1 
....................  
.................... // If you only want a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  
....................  
.................... #define USE_LCD_RW   1       
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................  0xc,                    // Display on  
....................  1,                      // Clear display  
....................  6                       // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
0028:  BTFSC  66.0
0029:  GOTO   02C
002A:  BCF    07.4
002B:  GOTO   02D
002C:  BSF    07.4
002D:  BCF    20.4
002E:  MOVF   20,W
002F:  BSF    03.5
0030:  MOVWF  07
....................  output_bit(LCD_DB5, !!(nibble & 2));   
0031:  BCF    03.5
0032:  BTFSC  66.1
0033:  GOTO   036
0034:  BCF    07.5
0035:  GOTO   037
0036:  BSF    07.5
0037:  BCF    20.5
0038:  MOVF   20,W
0039:  BSF    03.5
003A:  MOVWF  07
....................  output_bit(LCD_DB6, !!(nibble & 4));     
003B:  BCF    03.5
003C:  BTFSC  66.2
003D:  GOTO   040
003E:  BCF    07.6
003F:  GOTO   041
0040:  BSF    07.6
0041:  BCF    20.6
0042:  MOVF   20,W
0043:  BSF    03.5
0044:  MOVWF  07
....................  output_bit(LCD_DB7, !!(nibble & 8));     
0045:  BCF    03.5
0046:  BTFSC  66.3
0047:  GOTO   04A
0048:  BCF    07.7
0049:  GOTO   04B
004A:  BSF    07.7
004B:  BCF    20.7
004C:  MOVF   20,W
004D:  BSF    03.5
004E:  MOVWF  07
....................  
....................  delay_cycles(1);  
004F:  NOP
....................  output_high(LCD_E);  
0050:  BCF    03.5
0051:  BCF    20.2
0052:  MOVF   20,W
0053:  BSF    03.5
0054:  MOVWF  07
0055:  BCF    03.5
0056:  BSF    07.2
....................  delay_us(2);  
0057:  MOVLW  03
0058:  MOVWF  77
0059:  DECFSZ 77,F
005A:  GOTO   059
....................  output_low(LCD_E);  
005B:  BCF    20.2
005C:  MOVF   20,W
005D:  BSF    03.5
005E:  MOVWF  07
005F:  BCF    03.5
0060:  BCF    07.2
0061:  RETURN
.................... }  
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
0062:  CLRF   67
....................      
.................... output_high(LCD_E);  
0063:  BCF    20.2
0064:  MOVF   20,W
0065:  BSF    03.5
0066:  MOVWF  07
0067:  BCF    03.5
0068:  BSF    07.2
.................... delay_cycles(1);  
0069:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
006A:  BSF    20.4
006B:  MOVF   20,W
006C:  BSF    03.5
006D:  MOVWF  07
006E:  BCF    03.5
006F:  BCF    67.0
0070:  BTFSC  07.4
0071:  BSF    67.0
.................... retval_1 = input(LCD_DB5);  
0072:  BSF    20.5
0073:  MOVF   20,W
0074:  BSF    03.5
0075:  MOVWF  07
0076:  BCF    03.5
0077:  BCF    67.1
0078:  BTFSC  07.5
0079:  BSF    67.1
.................... retval_2 = input(LCD_DB6);  
007A:  BSF    20.6
007B:  MOVF   20,W
007C:  BSF    03.5
007D:  MOVWF  07
007E:  BCF    03.5
007F:  BCF    67.2
0080:  BTFSC  07.6
0081:  BSF    67.2
.................... retval_3 = input(LCD_DB7);  
0082:  BSF    20.7
0083:  MOVF   20,W
0084:  BSF    03.5
0085:  MOVWF  07
0086:  BCF    03.5
0087:  BCF    67.3
0088:  BTFSC  07.7
0089:  BSF    67.3
....................    
.................... output_low(LCD_E);  
008A:  BCF    20.2
008B:  MOVF   20,W
008C:  BSF    03.5
008D:  MOVWF  07
008E:  BCF    03.5
008F:  BCF    07.2
....................      
.................... return(retval);     
0090:  MOVF   67,W
0091:  MOVWF  78
0092:  RETURN
.................... }     
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
*
0099:  BCF    20.1
009A:  MOVF   20,W
009B:  BSF    03.5
009C:  MOVWF  07
009D:  BCF    03.5
009E:  BSF    07.1
.................... delay_cycles(1);  
009F:  NOP
....................  
.................... high = lcd_read_nibble();  
00A0:  CALL   062
00A1:  MOVF   78,W
00A2:  MOVWF  66
....................  
.................... low = lcd_read_nibble();  
00A3:  CALL   062
00A4:  MOVF   78,W
00A5:  MOVWF  65
....................  
.................... return( (high<<4) | low);  
00A6:  SWAPF  66,W
00A7:  MOVWF  77
00A8:  MOVLW  F0
00A9:  ANDWF  77,F
00AA:  MOVF   77,W
00AB:  IORWF  65,W
00AC:  MOVWF  78
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
0093:  BCF    20.0
0094:  MOVF   20,W
0095:  BSF    03.5
0096:  MOVWF  07
0097:  BCF    03.5
0098:  BCF    07.0
....................  
.................... #ifdef USE_LCD_RW  
.................... while(bit_test(lcd_read_byte(),7)) ;  
*
00AD:  MOVF   78,W
00AE:  MOVWF  65
00AF:  BTFSC  65.7
00B0:  GOTO   099
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
00B1:  MOVF   63,F
00B2:  BTFSC  03.2
00B3:  GOTO   0BB
....................    output_high(LCD_RS);  
00B4:  BCF    20.0
00B5:  MOVF   20,W
00B6:  BSF    03.5
00B7:  MOVWF  07
00B8:  BCF    03.5
00B9:  BSF    07.0
00BA:  GOTO   0C1
.................... else  
....................    output_low(LCD_RS);  
00BB:  BCF    20.0
00BC:  MOVF   20,W
00BD:  BSF    03.5
00BE:  MOVWF  07
00BF:  BCF    03.5
00C0:  BCF    07.0
....................        
....................  delay_cycles(1);  
00C1:  NOP
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
00C2:  BCF    20.1
00C3:  MOVF   20,W
00C4:  BSF    03.5
00C5:  MOVWF  07
00C6:  BCF    03.5
00C7:  BCF    07.1
.................... delay_cycles(1);  
00C8:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
00C9:  BCF    20.2
00CA:  MOVF   20,W
00CB:  BSF    03.5
00CC:  MOVWF  07
00CD:  BCF    03.5
00CE:  BCF    07.2
....................  
.................... lcd_send_nibble(n >> 4);  
00CF:  SWAPF  64,W
00D0:  MOVWF  65
00D1:  MOVLW  0F
00D2:  ANDWF  65,F
00D3:  MOVF   65,W
00D4:  MOVWF  66
00D5:  CALL   028
.................... lcd_send_nibble(n & 0xf);  
00D6:  MOVF   64,W
00D7:  ANDLW  0F
00D8:  MOVWF  65
00D9:  MOVWF  66
00DA:  CALL   028
00DB:  RETURN
.................... }  
....................  
.................... //----------------------------  
.................... void lcd_init(void)  
.................... {  
.................... int8 i;  
....................  
.................... output_low(LCD_RS);  
00DC:  BCF    20.0
00DD:  MOVF   20,W
00DE:  BSF    03.5
00DF:  MOVWF  07
00E0:  BCF    03.5
00E1:  BCF    07.0
....................  
.................... #ifdef USE_LCD_RW  
.................... output_low(LCD_RW);  
00E2:  BCF    20.1
00E3:  MOVF   20,W
00E4:  BSF    03.5
00E5:  MOVWF  07
00E6:  BCF    03.5
00E7:  BCF    07.1
.................... #endif  
....................  
.................... output_low(LCD_E);  
00E8:  BCF    20.2
00E9:  MOVF   20,W
00EA:  BSF    03.5
00EB:  MOVWF  07
00EC:  BCF    03.5
00ED:  BCF    07.2
....................  
.................... delay_ms(15);  
00EE:  MOVLW  0F
00EF:  MOVWF  5F
00F0:  CALL   014
....................  
.................... for(i=0 ;i < 3; i++)  
00F1:  CLRF   51
00F2:  MOVF   51,W
00F3:  SUBLW  02
00F4:  BTFSS  03.0
00F5:  GOTO   0FE
....................    {  
....................     lcd_send_nibble(0x03);  
00F6:  MOVLW  03
00F7:  MOVWF  66
00F8:  CALL   028
....................     delay_ms(5);  
00F9:  MOVLW  05
00FA:  MOVWF  5F
00FB:  CALL   014
00FC:  INCF   51,F
00FD:  GOTO   0F2
....................    }  
....................  
.................... lcd_send_nibble(0x02);  
00FE:  MOVLW  02
00FF:  MOVWF  66
0100:  CALL   028
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
0101:  CLRF   51
0102:  MOVF   51,W
0103:  SUBLW  03
0104:  BTFSS  03.0
0105:  GOTO   10F
....................    {  
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);  
0106:  MOVF   51,W
0107:  CALL   004
0108:  MOVWF  52
0109:  CLRF   63
010A:  MOVF   52,W
010B:  MOVWF  64
010C:  CALL   093
....................      
....................     // If the R/W signal is not used, then  
....................     // the busy bit can't be polled.  One of  
....................     // the init commands takes longer than  
....................     // the hard-coded delay of 60 us, so in  
....................     // that case, lets just do a 5 ms delay  
....................     // after all four of them.  
....................     #ifndef USE_LCD_RW  
010D:  INCF   51,F
010E:  GOTO   102
....................     delay_ms(5);  
....................     #endif  
....................    }  
010F:  BCF    0A.3
0110:  BCF    0A.4
0111:  GOTO   3C8 (RETURN)
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
.................... if(y != 1)  
*
01FA:  DECFSZ 60,W
01FB:  GOTO   1FD
01FC:  GOTO   200
....................    address = lcd_line_two;  
01FD:  MOVLW  40
01FE:  MOVWF  61
01FF:  GOTO   201
.................... else  
....................    address=0;  
0200:  CLRF   61
....................  
.................... address += x-1;  
0201:  MOVLW  01
0202:  SUBWF  5F,W
0203:  ADDWF  61,F
.................... lcd_send_byte(0, 0x80 | address);  
0204:  MOVF   61,W
0205:  IORLW  80
0206:  MOVWF  62
0207:  CLRF   63
0208:  MOVF   62,W
0209:  MOVWF  64
020A:  CALL   093
.................... }  
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
*
01E3:  MOVF   5E,W
01E4:  XORLW  0C
01E5:  BTFSC  03.2
01E6:  GOTO   1EE
01E7:  XORLW  06
01E8:  BTFSC  03.2
01E9:  GOTO   1F6
01EA:  XORLW  02
01EB:  BTFSC  03.2
01EC:  GOTO   20C
01ED:  GOTO   211
....................    {  
....................     case '\f':  
....................       lcd_send_byte(0,1);  
01EE:  CLRF   63
01EF:  MOVLW  01
01F0:  MOVWF  64
01F1:  CALL   093
....................       delay_ms(2);  
01F2:  MOVLW  02
01F3:  MOVWF  5F
01F4:  CALL   014
....................       break;  
01F5:  GOTO   216
....................      
....................     case '\n':  
....................        lcd_gotoxy(1,2);  
01F6:  MOVLW  01
01F7:  MOVWF  5F
01F8:  MOVLW  02
01F9:  MOVWF  60
....................        break;  
*
020B:  GOTO   216
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
020C:  CLRF   63
020D:  MOVLW  10
020E:  MOVWF  64
020F:  CALL   093
....................        break;  
0210:  GOTO   216
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
0211:  MOVLW  01
0212:  MOVWF  63
0213:  MOVF   5E,W
0214:  MOVWF  64
0215:  CALL   093
....................        break;  
....................    }  
0216:  RETURN
.................... }  
....................  
.................... //------------------------------  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(lcd_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif 
....................  
.................... float g,c,tem,a,b; 
.................... float i=0; 
.................... float sensorvalue=0; 
.................... float sensorvalue1=0; 
.................... void main() 
*
039D:  MOVF   03,W
039E:  ANDLW  1F
039F:  MOVWF  03
03A0:  MOVLW  FF
03A1:  MOVWF  20
03A2:  CLRF   38
03A3:  CLRF   37
03A4:  CLRF   36
03A5:  CLRF   35
03A6:  CLRF   3C
03A7:  CLRF   3B
03A8:  CLRF   3A
03A9:  CLRF   39
03AA:  CLRF   40
03AB:  CLRF   3F
03AC:  CLRF   3E
03AD:  CLRF   3D
03AE:  BSF    03.5
03AF:  BSF    1F.0
03B0:  BSF    1F.1
03B1:  BSF    1F.2
03B2:  BCF    1F.3
03B3:  MOVLW  07
03B4:  MOVWF  1C
03B5:  BCF    03.7
....................   
.................... { 
....................  
....................  
....................  
.................... setup_adc(ADC_CLOCK_INTERNAL); // initialize ADC with a sampling rate of Crystal/4 MHz 
03B6:  BCF    1F.6
03B7:  BCF    03.5
03B8:  BSF    1F.6
03B9:  BSF    1F.7
03BA:  BSF    03.5
03BB:  BSF    1F.7
03BC:  BCF    03.5
03BD:  BSF    1F.0
.................... setup_adc_ports(ALL_ANALOG  );   // set PIN_A0 as analog input channel 
03BE:  BSF    03.5
03BF:  BCF    1F.0
03C0:  BCF    1F.1
03C1:  BCF    1F.2
03C2:  BCF    1F.3
.................... delay_ms(5); 
03C3:  MOVLW  05
03C4:  BCF    03.5
03C5:  MOVWF  5F
03C6:  CALL   014
.................... lcd_init(); 
03C7:  GOTO   0DC
.................... delay_ms(1000); 
03C8:  MOVLW  04
03C9:  MOVWF  51
03CA:  MOVLW  FA
03CB:  MOVWF  5F
03CC:  CALL   014
03CD:  DECFSZ 51,F
03CE:  GOTO   3CA
....................  
....................  
....................   while(1) 
....................   { 
....................   set_adc_channel(0); 
03CF:  MOVLW  00
03D0:  MOVWF  78
03D1:  MOVF   1F,W
03D2:  ANDLW  C7
03D3:  IORWF  78,W
03D4:  MOVWF  1F
.................... sensorvalue=read_adc(); 
03D5:  BSF    1F.2
03D6:  BTFSC  1F.2
03D7:  GOTO   3D6
03D8:  MOVF   1E,W
03D9:  MOVWF  7A
03DA:  BSF    03.5
03DB:  MOVF   1E,W
03DC:  BCF    03.5
03DD:  MOVWF  51
03DE:  MOVF   1E,W
03DF:  MOVWF  52
03E0:  CALL   112
03E1:  MOVF   7A,W
03E2:  MOVWF  3C
03E3:  MOVF   79,W
03E4:  MOVWF  3B
03E5:  MOVF   78,W
03E6:  MOVWF  3A
03E7:  MOVF   77,W
03E8:  MOVWF  39
.................... delay_ms(100); 
03E9:  MOVLW  64
03EA:  MOVWF  5F
03EB:  CALL   014
.................... set_adc_channel(1); 
03EC:  MOVLW  08
03ED:  MOVWF  78
03EE:  MOVF   1F,W
03EF:  ANDLW  C7
03F0:  IORWF  78,W
03F1:  MOVWF  1F
.................... sensorvalue1=read_adc(); 
03F2:  BSF    1F.2
03F3:  BTFSC  1F.2
03F4:  GOTO   3F3
03F5:  MOVF   1E,W
03F6:  MOVWF  7A
03F7:  BSF    03.5
03F8:  MOVF   1E,W
03F9:  BCF    03.5
03FA:  MOVWF  51
03FB:  MOVF   1E,W
03FC:  MOVWF  52
03FD:  CALL   112
03FE:  MOVF   7A,W
03FF:  MOVWF  40
0400:  MOVF   79,W
0401:  MOVWF  3F
0402:  MOVF   78,W
0403:  MOVWF  3E
0404:  MOVF   77,W
0405:  MOVWF  3D
.................... delay_ms(100); 
0406:  MOVLW  64
0407:  MOVWF  5F
0408:  CALL   014
.................... float b1=(sensorvalue*(5.0/1023.0)); 
0409:  MOVF   3C,W
040A:  MOVWF  61
040B:  MOVF   3B,W
040C:  MOVWF  60
040D:  MOVF   3A,W
040E:  MOVWF  5F
040F:  MOVF   39,W
0410:  MOVWF  5E
0411:  MOVLW  0A
0412:  MOVWF  65
0413:  MOVLW  28
0414:  MOVWF  64
0415:  MOVLW  20
0416:  MOVWF  63
0417:  MOVLW  77
0418:  MOVWF  62
0419:  CALL   12F
041A:  MOVF   7A,W
041B:  MOVWF  44
041C:  MOVF   79,W
041D:  MOVWF  43
041E:  MOVF   78,W
041F:  MOVWF  42
0420:  MOVF   77,W
0421:  MOVWF  41
.................... delay_ms(100); 
0422:  MOVLW  64
0423:  MOVWF  5F
0424:  CALL   014
.................... float battery1=b1*2.4; 
0425:  MOVF   44,W
0426:  MOVWF  61
0427:  MOVF   43,W
0428:  MOVWF  60
0429:  MOVF   42,W
042A:  MOVWF  5F
042B:  MOVF   41,W
042C:  MOVWF  5E
042D:  MOVLW  9A
042E:  MOVWF  65
042F:  MOVLW  99
0430:  MOVWF  64
0431:  MOVLW  19
0432:  MOVWF  63
0433:  MOVLW  80
0434:  MOVWF  62
0435:  CALL   12F
0436:  MOVF   7A,W
0437:  MOVWF  48
0438:  MOVF   79,W
0439:  MOVWF  47
043A:  MOVF   78,W
043B:  MOVWF  46
043C:  MOVF   77,W
043D:  MOVWF  45
.................... delay_ms(100); 
043E:  MOVLW  64
043F:  MOVWF  5F
0440:  CALL   014
.................... float b2=(sensorvalue1*(5.0/1023.0)); 
0441:  MOVF   40,W
0442:  MOVWF  61
0443:  MOVF   3F,W
0444:  MOVWF  60
0445:  MOVF   3E,W
0446:  MOVWF  5F
0447:  MOVF   3D,W
0448:  MOVWF  5E
0449:  MOVLW  0A
044A:  MOVWF  65
044B:  MOVLW  28
044C:  MOVWF  64
044D:  MOVLW  20
044E:  MOVWF  63
044F:  MOVLW  77
0450:  MOVWF  62
0451:  CALL   12F
0452:  MOVF   7A,W
0453:  MOVWF  4C
0454:  MOVF   79,W
0455:  MOVWF  4B
0456:  MOVF   78,W
0457:  MOVWF  4A
0458:  MOVF   77,W
0459:  MOVWF  49
.................... delay_ms(100); 
045A:  MOVLW  64
045B:  MOVWF  5F
045C:  CALL   014
.................... float battery2=b2*2.4; 
045D:  MOVF   4C,W
045E:  MOVWF  61
045F:  MOVF   4B,W
0460:  MOVWF  60
0461:  MOVF   4A,W
0462:  MOVWF  5F
0463:  MOVF   49,W
0464:  MOVWF  5E
0465:  MOVLW  9A
0466:  MOVWF  65
0467:  MOVLW  99
0468:  MOVWF  64
0469:  MOVLW  19
046A:  MOVWF  63
046B:  MOVLW  80
046C:  MOVWF  62
046D:  CALL   12F
046E:  MOVF   7A,W
046F:  MOVWF  50
0470:  MOVF   79,W
0471:  MOVWF  4F
0472:  MOVF   78,W
0473:  MOVWF  4E
0474:  MOVF   77,W
0475:  MOVWF  4D
.................... delay_ms(100); 
0476:  MOVLW  64
0477:  MOVWF  5F
0478:  CALL   014
.................... if(battery2>=11.00){ 
0479:  CLRF   54
047A:  CLRF   53
047B:  MOVLW  30
047C:  MOVWF  52
047D:  MOVLW  82
047E:  MOVWF  51
047F:  MOVF   50,W
0480:  MOVWF  58
0481:  MOVF   4F,W
0482:  MOVWF  57
0483:  MOVF   4E,W
0484:  MOVWF  56
0485:  MOVF   4D,W
0486:  MOVWF  55
0487:  CALL   1A4
0488:  BTFSC  03.0
0489:  GOTO   48C
048A:  BTFSS  03.2
048B:  GOTO   493
.................... output_high(pin_d0); 
048C:  BSF    03.5
048D:  BCF    08.0
048E:  BCF    03.5
048F:  BSF    08.0
.................... delay_ms(100); 
0490:  MOVLW  64
0491:  MOVWF  5F
0492:  CALL   014
.................... } 
.................... if(battery1>=11.00){ 
0493:  CLRF   54
0494:  CLRF   53
0495:  MOVLW  30
0496:  MOVWF  52
0497:  MOVLW  82
0498:  MOVWF  51
0499:  MOVF   48,W
049A:  MOVWF  58
049B:  MOVF   47,W
049C:  MOVWF  57
049D:  MOVF   46,W
049E:  MOVWF  56
049F:  MOVF   45,W
04A0:  MOVWF  55
04A1:  CALL   1A4
04A2:  BTFSC  03.0
04A3:  GOTO   4A6
04A4:  BTFSS  03.2
04A5:  GOTO   4AD
.................... output_low(pin_d0); 
04A6:  BSF    03.5
04A7:  BCF    08.0
04A8:  BCF    03.5
04A9:  BCF    08.0
.................... delay_ms(100); 
04AA:  MOVLW  64
04AB:  MOVWF  5F
04AC:  CALL   014
.................... } 
.................... if(battery1>=12.00 && battery2>=12.00){ 
04AD:  CLRF   54
04AE:  CLRF   53
04AF:  MOVLW  40
04B0:  MOVWF  52
04B1:  MOVLW  82
04B2:  MOVWF  51
04B3:  MOVF   48,W
04B4:  MOVWF  58
04B5:  MOVF   47,W
04B6:  MOVWF  57
04B7:  MOVF   46,W
04B8:  MOVWF  56
04B9:  MOVF   45,W
04BA:  MOVWF  55
04BB:  CALL   1A4
04BC:  BTFSC  03.0
04BD:  GOTO   4C0
04BE:  BTFSS  03.2
04BF:  GOTO   4DA
04C0:  CLRF   54
04C1:  CLRF   53
04C2:  MOVLW  40
04C3:  MOVWF  52
04C4:  MOVLW  82
04C5:  MOVWF  51
04C6:  MOVF   50,W
04C7:  MOVWF  58
04C8:  MOVF   4F,W
04C9:  MOVWF  57
04CA:  MOVF   4E,W
04CB:  MOVWF  56
04CC:  MOVF   4D,W
04CD:  MOVWF  55
04CE:  CALL   1A4
04CF:  BTFSC  03.0
04D0:  GOTO   4D3
04D1:  BTFSS  03.2
04D2:  GOTO   4DA
.................... output_high(pin_d1); 
04D3:  BSF    03.5
04D4:  BCF    08.1
04D5:  BCF    03.5
04D6:  BSF    08.1
.................... delay_ms(100); 
04D7:  MOVLW  64
04D8:  MOVWF  5F
04D9:  CALL   014
.................... } 
.................... printf(lcd_putc,"\fB1:%f",battery1); 
04DA:  MOVLW  0C
04DB:  BSF    03.6
04DC:  MOVWF  0D
04DD:  MOVLW  00
04DE:  MOVWF  0F
04DF:  BCF    03.0
04E0:  MOVLW  04
04E1:  BCF    03.6
04E2:  MOVWF  51
04E3:  CALL   217
04E4:  MOVLW  89
04E5:  MOVWF  04
04E6:  MOVF   48,W
04E7:  MOVWF  54
04E8:  MOVF   47,W
04E9:  MOVWF  53
04EA:  MOVF   46,W
04EB:  MOVWF  52
04EC:  MOVF   45,W
04ED:  MOVWF  51
04EE:  MOVLW  02
04EF:  MOVWF  55
04F0:  CALL   2BD
.................... delay_ms(100); 
04F1:  MOVLW  64
04F2:  MOVWF  5F
04F3:  CALL   014
.................... printf(lcd_putc,"\nB2:%f",battery2); 
04F4:  MOVLW  10
04F5:  BSF    03.6
04F6:  MOVWF  0D
04F7:  MOVLW  00
04F8:  MOVWF  0F
04F9:  BCF    03.0
04FA:  MOVLW  04
04FB:  BCF    03.6
04FC:  MOVWF  51
04FD:  CALL   217
04FE:  MOVLW  89
04FF:  MOVWF  04
0500:  MOVF   50,W
0501:  MOVWF  54
0502:  MOVF   4F,W
0503:  MOVWF  53
0504:  MOVF   4E,W
0505:  MOVWF  52
0506:  MOVF   4D,W
0507:  MOVWF  51
0508:  MOVLW  02
0509:  MOVWF  55
050A:  CALL   2BD
.................... delay_ms(100); 
050B:  MOVLW  64
050C:  MOVWF  5F
050D:  CALL   014
050E:  GOTO   3CF
....................   } 
.................... } 
....................  
050F:  SLEEP

Configuration Fuses:
   Word  1: 0F02   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG PROTECT
